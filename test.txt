const f64 factorial(const f64 n)
{
	//n = 0;
    if(n == 0 || n == 1)
        return 1;
    return n * factorial(n-1);
}

void mod(f64* value)
{
    *value = 666;
}

void mod2(s8* s)
{
	*s = 44;
}

void mod3(const s8* const * ptr)
{
	print(**ptr + 44);
	**(s8**)ptr  = 69;
}


struct rt_vec3
{
    f64 x;
    f64 y;
    f64 z;
};

struct rt_ray
{
    rt_vec3 origin;
    rt_vec3 direction;
    const s8* ptr;
};

rt_ray get_default_ray()
{
    rt_vec3 dummy;
    rt_ray d;
    d.origin.x = 7;
    d.direction.y = 99;
    return d;
}

void main()
{
    {
        rt_ray* rays = (rt_ray*)malloc(sizeof(rt_ray) * 5);
        //rays[0].direction.z = 55;
        //rays[4].origin.x = 6;
        
        //print(rays[0].direction.z);
       // print(rays[4].origin.x);
    }
    {
        rt_ray ray;
        rt_vec3 vec;
        vec.z = 3;
        print(vec.z);
        ray.direction.z = 6;
        ray.direction = vec;
        print(ray.direction.z);
    }
    {
        const rt_ray cray = get_default_ray();
        print(cray.direction.y);
        print(cray.origin.x);
        
        rt_ray ray;
        ray.origin.x = 5;
        
        rt_ray* ptr = &ray;
        (*ptr).origin.x = 666;
        ptr->origin.y = 20;
        
        rt_vec3 vec;
        vec.x = 10;
        vec.y = 1;
        vec.z = 2;
        
        rt_vec3*  vec_ptr = &vec;
        vec_ptr->x = 8;
        
        ray.direction = vec;
       
       print("ray.origin.x");
       print(ray.origin.x);
       print(ray.direction.z);
       
       rt_ray ray2;
       ray2.origin.y = 69;
       
       ray = ray2;
       
       print(ray.origin.y);
    }
    {
        s8 x = 10;
        void* ptr = &x;
        ((s8*)ptr)[0] = 20;
        print(x);
    }
	{
        s8** strings = (s8**)malloc(2 * 8);
		strings[0] = (s8*)"trele";
		strings[1] = (s8*)"dodo";
		
		s8* output_str = (s8*)malloc(3);
		
		output_str[0] = strings[0][1];
        output_str[1] = strings[1][3];
		output_str[2] = 0;
		
		print(output_str);
		
		strings[0][0] = 'a';
		print(strings[0]);
	}
	
	print((s8)4.0 % 3);
	print(6 % 2);
	print(5 % 3);
	print(2 % 8);
	print("hello from script, nice to see you!");
	const s8* const strr = "fjkdfjdkl";
	factorial(3.0);
	{
		s32 x = 10;
		s32* const  ptr = &x;
		*ptr = 20;
		//ptr = nullptr;
		print(x);
	}
	
	{
		const s8 x = 6;
		const s8* const ptr = &x;
		//mod2(ptr);
		mod3(&ptr);
		print(x);
		
		//ptr[0] = 4;
		//x[4] = 8;
		
	}
	{
		const s8 x = -1;
		//(s8)x = 5;
		print(6969);
		print(x);
	}

	const s8 dddd = factorial(3);
	bool d = true;
	++d;
	print(d);
	d = 0;
	print(d);
	++d;
	print(d);
	print(666 != 69);
	print( (5 + 2) * 2 );
	s8* string = (s8*)malloc(10);
	*(string) =  'A';
    *(string + (s32)1.1) = 'B';
    string[2] = '\n';
	string[3] = '\0';
	print(string);
	f64 lik = 70;
	print((bool)lik);
	bool cc = 900;
	print(cc);
	cc -= 1;
	print(cc);
	cc = 1;
	cc -= 2;
	print(cc);
	

    print(factorial(9));
    {
        print(6999);
    }
    
    f64* ptr;
    
    f64 i  = 8;
    
    ptr = &i;
    
    *ptr = 10;
    print(i);
    
    f64** ptr2 = &ptr;
    
    **ptr2 = 20;
    
    print(i);
    
    mod(*ptr2);
    print(i);
	
	print(5 + 6);
	
	bool lolo = true;
	lolo = false;
	f64 dd = true + false;
	print(dd);
	
	dd = 666;
	print(dd);
	print(!!dd);
	
	s32 dua = true + true +  true * 2;
	print(dua);
	print(true + true + false);
	
	{
		void* ptr1 = &lolo;
		//ptr1 = nullptr;
		
		if(ptr1)
			print(38924983.5);
		else
			print(11111111);
			
	}
}
